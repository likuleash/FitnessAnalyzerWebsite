prompt for BING AI

import cv2 as cv
import numpy as np
import math
import matplotlib.pyplot as plt

# Load the TensorFlow model for pose estimation
net = cv.dnn.readNetFromTensorflow("graph_opt.pb")

# Image size for the model
inWidth = 368
inHeight = 368
thr = 0.2

# Body parts and pairs for drawing
BODY_PARTS = {
    "Nose": 0, "Neck": 1, "RShoulder": 2, "RElbow": 3, "RWrist": 4,
    "LShoulder": 5, "LElbow": 6, "LWrist": 7, "RHip": 8, "RKnee": 9,
    "RAnkle": 10, "LHip": 11, "LKnee": 12, "LAnkle": 13, "REye": 14,
    "LEye": 15, "REar": 16, "LEar": 17, "Background": 18
}

POSE_PAIRS = [
    ["Neck", "RShoulder"], ["Neck", "LShoulder"], ["RShoulder", "RElbow"],
    ["RElbow", "RWrist"], ["LShoulder", "LElbow"], ["LElbow", "LWrist"],
    ["Neck", "RHip"], ["RHip", "RKnee"], ["RKnee", "RAnkle"], ["Neck", "LHip"],
    ["LHip", "LKnee"], ["LKnee", "LAnkle"], ["Neck", "Nose"], ["Nose", "REye"],
    ["REye", "REar"], ["Nose", "LEye"], ["LEye", "LEar"]
]


# Function to calculate angle between three points using cosine similarity
def calculate_angle(a, b, c):
    if a is None or b is None or c is None:
        return None
    ab = np.array([a[0] - b[0], a[1] - b[1]])
    cb = np.array([c[0] - b[0], c[1] - b[1]])
    dot_product = np.dot(ab, cb)
    magnitude_ab = np.linalg.norm(ab)
    magnitude_cb = np.linalg.norm(cb)
    if magnitude_ab * magnitude_cb == 0:
        return None
    cos_angle = dot_product / (magnitude_ab * magnitude_cb)
    angle = np.degrees(np.arccos(cos_angle))
    return angle


# Pose estimation function
def pose_estimation(frame):
    frameWidth = frame.shape[1]
    frameHeight = frame.shape[0]
    net.setInput(cv.dnn.blobFromImage(frame, 1.0, (inWidth, inHeight), (127.5, 127.5, 127.5), swapRB=True, crop=False))
    out = net.forward()
    out = out[:, :19, :, :]  # Extract keypoints

    points = []
    for i in range(len(BODY_PARTS)):
        heatMap = out[0, i, :, :]
        _, conf, _, point = cv.minMaxLoc(heatMap)
        x = (frameWidth * point[0]) / out.shape[3]
        y = (frameHeight * point[1]) / out.shape[2]
        points.append((int(x), int(y)) if conf > thr else None)

    for pair in POSE_PAIRS:
        partFrom, partTo = pair
        idFrom = BODY_PARTS[partFrom]
        idTo = BODY_PARTS[partTo]
        if points[idFrom] and points[idTo]:
            cv.line(frame, points[idFrom], points[idTo], (0, 255, 0), 3)
            cv.ellipse(frame, points[idFrom], (3, 3), 0, 0, 360, (0, 0, 255), cv.FILLED)
            cv.ellipse(frame, points[idTo], (3, 3), 0, 0, 360, (0, 0, 255), cv.FILLED)

    return frame, points
def calculate_crunches_score(points):
    neck_angle = calculate_angle(points[BODY_PARTS["Neck"]], points[BODY_PARTS["RHip"]], points[BODY_PARTS["RKnee"]])

    # Assuming an ideal crunch angle is smaller (closer to 0 degrees) indicating torso flexion
    ideal_crunch_angle = 45  # Flexed torso
    if neck_angle:
        score = abs(neck_angle - ideal_crunch_angle)
        return max(0, 100 - score)  # Lower score indicates better crunch
    return 0
# Processing a video
def process_video(video_path):
    cap = cv.VideoCapture(video_path)
    if not cap.isOpened():
        raise IOError("Cannot open video")

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        estimated_frame, points = pose_estimation(frame)

        squat_score = calculate_squat_score(points)
        plank_score = calculate_plank_score(points)

        crunches_score = calculate_crunches_score(points)
        rows_score = calculate_bent_over_rows_score(points)

        cv.putText(estimated_frame, f"Squat Score: {squat_score:.2f}", (10, 90), cv.FONT_HERSHEY_SIMPLEX, 0.7,
                   (255, 255, 255), 2)
        cv.putText(estimated_frame, f"Plank Score: {plank_score:.2f}", (10, 120), cv.FONT_HERSHEY_SIMPLEX, 0.7,
                   (255, 255, 255), 2)

        cv.putText(estimated_frame, f"Crunches Score: {crunches_score:.2f}", (10, 30), cv.FONT_HERSHEY_SIMPLEX, 0.7,
                   (255, 255, 255), 2)
        cv.putText(estimated_frame, f"Rows Score: {rows_score:.2f}", (10, 60), cv.FONT_HERSHEY_SIMPLEX, 0.7,
                   (255, 255, 255), 2)


        cv.imshow('Pose Estimation', estimated_frame)
        if cv.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv.destroyAllWindows()


# Example usage
process_video('Squats.mp4')
THE BENT OVER ROWS FORMULA: (using Inverse Cosine Theorem)  (mod(90 - upper extremityA) /90 * 0.50 ) + (mod(90 - UpperArmA) / 90 * 0.25) + ((90- LowerArmA /90) *0.25) CAN YOU INCORPORATE in this formula in this code